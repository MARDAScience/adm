
# =========================================================
import rasterio
from glob import glob
import numpy as np
import os, time, sys, getopt
from scipy.signal import convolve2d
from tkinter import filedialog
from tkinter import *
# from skimage.io import imsave
from tqdm import tqdm
from tempfile import TemporaryFile
from datetime import datetime
from skimage.filters import threshold_otsu
from skimage.filters.rank import median
from skimage.morphology import disk
from tiler import Tiler, Merger

# =========================================================
USE_GPU = True
CALC_CONF = True
# =======================================================

if USE_GPU == True:
   ##use the first available GPU
   os.environ['CUDA_VISIBLE_DEVICES'] = '0' #'1'
else:
   ## to use the CPU (not recommended):
   os.environ['CUDA_VISIBLE_DEVICES'] = '-1'

import tensorflow as tf #numerical operations on gpu
import tensorflow.keras.backend as K
from tensorflow.keras.models import model_from_json

#suppress tensorflow warnings
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

SEED=42
np.random.seed(SEED)
AUTO = tf.data.experimental.AUTOTUNE # used in tf.data.Dataset API

tf.random.set_seed(SEED)

print("Version: ", tf.__version__)
print("Eager mode: ", tf.executing_eagerly())
print('GPU name: ', tf.config.experimental.list_physical_devices('GPU'))
print("Num GPUs Available: ", len(tf.config.experimental.list_physical_devices('GPU')))

##==========================================================
def load_ODM_json(weights_file):
    """
    load keras Res-UNet model implementation from json file
    mode=1, dem only
    """
    weights_path = weights_file
    json_file = open(weights_path.replace('.h5','.json'), 'r')
    loaded_model_json = json_file.read()
    json_file.close()
    model = model_from_json(loaded_model_json)

    model.load_weights(weights_path)
    model.compile(optimizer = 'adam', loss = 'categorical_crossentropy')#, metrics = [mean_iou, dice_coef])
    return model

#-----------------------------------
def medianfiltmask(est_label, radius=7):
    """
    mask a 1 or 3 band image, band by band for memory saving
    """
    out_label = np.ones_like(est_label)
    for k in range(est_label.shape[-1]):
        out_label[:,:,k] = median(est_label[:,:,k],disk(radius))
    return out_label


#-----------------------------------
def mask(bigtiff,profile,out_mask):
    """
    mask a 1 or 3 band image, band by band for memory saving
    """
    if profile['count']==4:
        bigtiff1 = bigtiff[0,:,:]
        bigtiff1[out_mask==1] = profile['nodata']
        bigtiff[0,:,:] = bigtiff1
        del bigtiff1

        bigtiff2 = bigtiff[1,:,:]
        bigtiff2[out_mask==1] = profile['nodata']
        bigtiff[1,:,:] = bigtiff2
        del bigtiff2

        bigtiff3 = bigtiff[2,:,:]
        bigtiff3[out_mask==1] = profile['nodata']
        bigtiff[2,:,:] = bigtiff3
        del bigtiff3

        bigtiff4 = bigtiff[3,:,:]
        bigtiff4[out_mask==1] = profile['nodata']
        bigtiff[3,:,:] = bigtiff4
        del bigtiff4
    else:
        bigtiff1 = bigtiff[0,:,:]
        bigtiff1[out_mask==1] = profile['nodata']
        bigtiff[0,:,:] = bigtiff1
        del bigtiff1

    return bigtiff


def masker(tile):
	if len(np.unique(tile))>1:		
		tile[tile==profile['nodata']] = 0

		# if do_plot:
		#     plt.subplot(233); plt.imshow(image, cmap='gray'); plt.axis('off'); plt.colorbar(shrink=.5)
		if model_mode<3:
			image = np.squeeze(tile).T
		elif model_mode==3: #rgb only
			image = np.squeeze(tile[:3,:,:]).T

		if model_mode==2: #stdev only
			##compute stdev raster using convoluttion with a 3x3 kernel
			image = std_convoluted(tile, 3)
			del orig
			##scale image exponentially using n=.5
			image = z_exp(image,n=0.5)

		if model_mode==4: #rgb + dem
			image = np.squeeze(orig).T

		image = tf.expand_dims(image, 0)
		#print(image.shape)
		# use model in prediction mode
		est_label = model.predict(image , batch_size=1).squeeze()
		# image = image.numpy().squeeze()

		# est_label_orig = est_label.copy()
		# est_label = np.zeros((est_label.shape[0], est_label.shape[1])) #np.argmax(est_label, -1).astype(np.uint8).T

		# if use_otsu: 
		   # otsu_nodata = threshold_otsu(est_label_orig[:,:,0])
		   # otsu_baddata = threshold_otsu(est_label_orig[:,:,1])
		   # otsu_gooddata = threshold_otsu(est_label_orig[:,:,2])
		   
		   # est_label[est_label_orig[:,:,0]>otsu_nodata] = 0  #nodata
		   # est_label[est_label_orig[:,:,1]>otsu_baddata] = 0  #bad

		   # est_label[est_label_orig[:,:,2]>otsu_gooddata] = 1  #good
		   # est_label[est_label>1] = 1
		
		# else:
		   # # if np.any(est_label_orig[:,:,2]>.05):
		   # est_label[est_label_orig[:,:,0]>0.5] = 0  #nodata
		   # est_label[est_label_orig[:,:,1]>0.5] = 0  #bad

		   # est_label[est_label_orig[:,:,2]>0.5] = 1  #good
		   # est_label[est_label>1] = 1
		return np.argmax(est_label,axis=-1).T
	else:
		#est_label = tile.copy()
		return tile.copy().T
	


dem = r'F:/dbuscombe_github/dems/noisy/clip_20181006_Ophelia_Inlet_to_Beaufort_Inlet_1m_UTM18N_NAVD88_cog.tif'
dem = os.path.normpath(dem)

if 'model_mode' not in locals():
	model_mode = 1
print(model_mode)

if 'overlap' not in locals():
	overlap = 25 #25% overlap
print(overlap)	

if 'medfilt_radius' not in locals():
	medfilt_radius = 0

print(medfilt_radius)

if 'use_otsu' not in locals():
	use_otsu = False
elif type(use_otsu) is int:
	use_otsu = bool(use_otsu)
print(use_otsu)	

print("Working on %s" % (dem))
tilesize = 1024 #
verbose = True
# thres = .25  #channel 2 (bad) threshold - deliberately <=.5

if model_mode==1: #dem only
	print('DEM-only mode')
	weights_file = 'model'+os.sep+'orthoclip_demonly_3class_batch_6.h5'
elif model_mode==2: #stdev only
	print('STDEV-only mode')
	weights_file = 'model'+os.sep+'orthoclip_stdevonly_3class_batch_6.h5'
elif model_mode==3: #rgb only
	print('Ortho-only mode')
	weights_file = 'model'+os.sep+'orthoclip_orthoonly_3class_batch_6.h5'
elif model_mode==4: #rgb+dem
	print('Ortho+DEM mode')
	weights_file = 'model'+os.sep+'orthoclip_RGBdem_3class_batch_6.h5'
else: #rgb+stdev
	print('Ortho+STDEV mode')
	weights_file = 'model'+os.sep+'orthoclip_RGBstdev_3class_batch_6.h5'

# do_plot=False #True
# if do_plot:
	# import matplotlib.pyplot as plt

# if verbose:
	# # # start timer
	# start = time.time()

# #====================================================
# with rasterio.open(dem) as src:
	# profile = src.profile

# width = profile['width']
# height = profile['height']

# padwidth = width + (tilesize - width % tilesize)
# padheight = height + (tilesize - height % tilesize)

try:
	#=======================================================
	# step 2: make an instance of the model and load the weights
	model = load_ODM_json(weights_file)
except:
	print("Model loading failed - check inputs. Exiting ...")
	sys.exit(2)


with rasterio.open(dem) as src:
	profile = src.profile
	image = src.read().squeeze()

prc_overlap = overlap/100
increment = int((1-prc_overlap)*tilesize)
tiler_mode = 'wrap'
# Setup tiling parameters
tiler = Tiler(data_shape=image.shape,
              tile_shape=(tilesize, tilesize),
			  overlap = increment,
			  mode=tiler_mode,
              channel_dimension=None)

# batch_size = 10
# tiles_in_batches = [batch for _, batch in tiler(image, batch_size=batch_size)]
			  
## Access tiles:
# 1. with an iterator
# for tile_id, tile in tiler.iterate(image):
   # print(f'Tile {tile_id} out of {len(tiler)} tiles.')
   
   
# # 1b. the iterator can also be accessed through __call__
# for tile_id, tile in tiler(image):
   # print(f'Tile {tile_id} out of {len(tiler)} tiles.')
# # 2. individually
# tile_3 = tiler.get_tile(image, 3)
# # 3. in batches
# tiles_in_batches = [batch for _, batch in tiler(image, batch_size=10)]


# Setup merging parameters
merger = Merger(tiler=tiler,
				window='hann')

## Merge tiles:
# # 1. one by one
for tile_id, tile in tqdm(tiler(image)):
   merger.add(tile_id, masker(tile))
  
 

nx, ny = image.shape  
   
# Final merging: applies tapering and optional unpadding
final_image = merger.merge(unpad=True) / merger.data_visits[:nx, :ny]

# final_image[final_image<0 ] =0
# final_image /= final_image.max()


# image = image.numpy().squeeze()

est_label_orig = est_label.copy()
est_label = np.zeros((est_label.shape[0], est_label.shape[1])) #np.argmax(est_label, -1).astype(np.uint8).T

if use_otsu: 
   otsu_nodata = threshold_otsu(est_label_orig[:,:,0])
   otsu_baddata = threshold_otsu(est_label_orig[:,:,1])
   otsu_gooddata = threshold_otsu(est_label_orig[:,:,2])
   
   est_label[est_label_orig[:,:,0]>otsu_nodata] = 0  #nodata
   est_label[est_label_orig[:,:,1]>otsu_baddata] = 0  #bad

   est_label[est_label_orig[:,:,2]>otsu_gooddata] = 1  #good
   est_label[est_label>1] = 1

else:
   # if np.any(est_label_orig[:,:,2]>.05):
   est_label[est_label_orig[:,:,0]>0.5] = 0  #nodata
   est_label[est_label_orig[:,:,1]>0.5] = 0  #bad

   est_label[est_label_orig[:,:,2]>0.5] = 1  #good
   est_label[est_label>1] = 1



profile['nodata'] = 0.0
profile['dtype'] = str(final_image.dtype)
profile['count'] = 1

with rasterio.Env():
	with rasterio.open(dem.replace('.tif','_automask.tif'), 'w', **profile) as dst:
		dst.write(np.expand_dims(final_image,0))


		image = image.numpy().squeeze()

		est_label_orig = est_label.copy()
		est_label = np.zeros((est_label.shape[0], est_label.shape[1])) #np.argmax(est_label, -1).astype(np.uint8).T

		if use_otsu: 
		   otsu_nodata = threshold_otsu(est_label_orig[:,:,0])
		   otsu_baddata = threshold_otsu(est_label_orig[:,:,1])
		   otsu_gooddata = threshold_otsu(est_label_orig[:,:,2])
		   
		   est_label[est_label_orig[:,:,0]>otsu_nodata] = 0  #nodata
		   est_label[est_label_orig[:,:,1]>otsu_baddata] = 0  #bad

		   est_label[est_label_orig[:,:,2]>otsu_gooddata] = 1  #good
		   est_label[est_label>1] = 1
		
		else:
		   # if np.any(est_label_orig[:,:,2]>.05):
		   est_label[est_label_orig[:,:,0]>0.5] = 0  #nodata
		   est_label[est_label_orig[:,:,1]>0.5] = 0  #bad

		   est_label[est_label_orig[:,:,2]>0.5] = 1  #good
		   est_label[est_label>1] = 1



# imsize = 64
# im = np.reshape(np.arange(imsize*imsize),[imsize,imsize])
# batch_size = 10
# overlap = 5
# tiler_mode = 'wrap'
# windows_supported = ['boxcar', 'triang', 'blackman', 'hamming', 'hann', 'bartlett', 'flattop', 'parzen', 'bohman', 'blackmanharris', 'nuttall', 'barthann', 'overlap-tile']
# tiler = Tiler(data_shape=im.shape,
                # tile_shape=(16,16),
                # channel_dimension=None,overlap=overlap,mode=tiler_mode,constant_value=1.0)
# #Tiler.TILING_MODES == ['constant', 'drop', 'irregular', 'reflect', 'edge', 'wrap']
# tiles_in_batches = [batch for _, batch in tiler(im, batch_size=batch_size)]
# merged_images = []

# for mwin in windows_supported:
    # merger = Merger(tiler,window=mwin)
    # #Merger.SUPPORTED_WINDOWS == ['boxcar', 'triang', 'blackman', 'hamming', 'hann', 'bartlett', 'flattop', 'parzen', 'bohman', 'blackmanharris', 'nuttall', 'barthann', 'overlap-tile']
    
    # for batch_id, batch in enumerate(tiles_in_batches):
        # merger.add_batch(batch_id, batch_size, batch)

    # imf = merger.merge(unpad=True,argmax=False)
    # merged_images.append(imf)
# merged_images = np.array(merged_images)
# fig,ax = plt.subplots(nrows=4,ncols=4,figsize=[14,14])
# axm = ax.flatten()
# for m,mim in enumerate(merged_images): 
    # ima = axm[m].imshow(mim)
# axm[m+1].imshow(im)
# plt.show() 

